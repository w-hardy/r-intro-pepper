[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PEPPER: Introduction to R",
    "section": "",
    "text": "This site contains short, practical tutorials to help PEPPER group members build skills in R using RStudio and tidyverse packages in tidyverse-style code. The materials assume you will primarily work in RStudio, but many resources also work in any R console.\n\n1 Getting started with R and RStudio\nIf you have not used R before, take a moment to set up your environment and explore RStudio. The steps below mirror what we often do when onboarding new colleagues.\n\nInstall R and RStudio. Follow the official R installation guide for your operating system, then install the free RStudio Desktop IDE. The Hands-on Programming with R “Starting out” guide walks through the process for Windows, macOS, and Linux.\nOpen RStudio and check your setup. Launch RStudio and confirm that the R version appears in the console pane. Try running sessionInfo() to verify that R and the default packages load correctly.\nTake a quick tour. RStudio’s IDE cheat sheet highlights key panes and shortcuts. The “Primers” on Posit Cloud offer free, interactive introductions if you prefer guided lessons.\nOrganise your projects. Create a dedicated folder (or RStudio Project) for these tutorials so your scripts and data stay together. The RStudio Projects overview explains the benefits.\n\nWorking through the tutorials here may be useful for those new to R, particularly in preparation for working through the R for Health Technology Assessment text book if the contents of Chapter 2: Introduction to R is new. R for Data Science will provide a much more comprehensive instruction on using R. The RStudio Education learning resources and R4DS Online Learning Community are also excellent places to ask questions and find study partners.\n\n\n2 Using each chapter\nEach chapter will have an introduction and sections for different actions you may wish to carry out. For each action there will be three tabs: Example, Exercise, and Solution. The example will show you how to perform the task; the exercise will provide a template, with sections missing for you to fill in as practice; and the solution will provide the solution to the exercise so you can check (a) your code and (b) your output.\nStart with the first chapter or browse all tutorials from the sidebar. If you are completely new to R, begin with R: quick start to learn how to open RStudio, run commands, and explore data before moving on to later topics.\n\n\n\n\n\n\nNote\n\n\n\nThese tutorials are not meant to be comprehensive and there will also be other ways to achieve the same goal. The intention is to help people start using R for their work and perhaps find common ways of performing regular tasks. This site should develop and grow over time.\n\n\n\n\n3 Issues\nIf there are problems with anything contained in this site, please add a “new issue” using the green button at https://github.com/w-hardy/r-intro-pepper/issues. This will allow me to keep track of them.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome</span>"
    ]
  },
  {
    "objectID": "tutorials/01-intro.html",
    "href": "tutorials/01-intro.html",
    "title": "2  R: quick start",
    "section": "",
    "text": "2.1 Before you begin\nOnce you are comfortable moving between the Source and Console panes, continue with installing and loading the packages you will use throughout the tutorials.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R: quick start</span>"
    ]
  },
  {
    "objectID": "tutorials/01-intro.html#before-you-begin",
    "href": "tutorials/01-intro.html#before-you-begin",
    "title": "2  R: quick start",
    "section": "",
    "text": "Open RStudio. Double-click the RStudio icon (or launch it from Posit Cloud) and wait for the Console pane to show the R version. If the console displays an error, reinstall R before continuing.\nCreate a script. Select File → New File → R Script. This opens the Source pane where you can save your code as a reusable script. Save the file immediately using Ctrl/Cmd + S so you can keep track of your work.\nRun code. Type 1 + 1 on a line in the Source pane and press Ctrl/Cmd + Enter (or use the Run button). The code should appear in the Console followed by the result. You can also type directly in the Console for quick checks.\nCheck your working directory. Run getwd() to confirm where files will be saved. If needed, use the Files pane to navigate to your project folder and click Set As Working Directory.\n\n\n\n\n\n\n\n\nTip\n\n\n\nThere is a clipboard icon in the top right of each code block, you can use this to copy the code to the clipboard, which may be useful in some of the exercises. Copying does not execute the code — you’ll still need to paste and run it in your R console.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R: quick start</span>"
    ]
  },
  {
    "objectID": "tutorials/01-intro.html#installing-and-loading-packages",
    "href": "tutorials/01-intro.html#installing-and-loading-packages",
    "title": "2  R: quick start",
    "section": "2.2 Installing and loading packages",
    "text": "2.2 Installing and loading packages\nFor most of the work you do using R, you will need to use functions from packages. You install packages once, but you must load them each time you start R. For the tutorials on this site, you will need the following packages: dplyr for data manipulation, ggplot2 for creating plots, and broom for summarising statistical models. These are installed using the install.packages() function.1 If you are using a managed machine, you may need to request administrator rights or ask IT to complete this step for you.\n\ninstall.packages(c(\"readr\", \"dplyr\", \"ggplot2\", \"broom\"))\n\n\n\n\n\n\n\nNote\n\n\n\nRunning the install.packages() function will also install dependencies for the packages you have requested\n\n\n\n\n\n\n\n\nTip\n\n\n\nYou only need to install each package once per version of R, but you must use library() every time you start a new R session.\n\n\nYou will then need to load each of these before using them, this must be done separately for each package and is best done at the top of each script. If library() reports an error, restart R (Session → Restart R) and try again to ensure your packages are available:\n\nlibrary(readr) # For reading data\nlibrary(dplyr) # For data manipulation\nlibrary(ggplot2) # For creating plots\n\n\n\n\n\n\n\nNote\n\n\n\nAnything after # is ignored by R. Use comments to explain what your code does or why you made certain choices.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R: quick start</span>"
    ]
  },
  {
    "objectID": "tutorials/01-intro.html#data",
    "href": "tutorials/01-intro.html#data",
    "title": "2  R: quick start",
    "section": "2.3 Data",
    "text": "2.3 Data\nFor more detail on importing data, see the R4DS chapter on data import. The RStudio data import cheatsheet is also a handy reference when you are working with CSV, Excel, or database connections.\n\n2.3.1 Preloaded data\nR comes with several datasets preloaded in the datasets package. These can be useful when you are learning new methods or to demonstrate things to others. For the tutorials on this site we will use the penguins dataset, R (4.5.0+) includes the penguins dataset, originally from the palmerpenguins package. The first five rows are below:\n\npenguins |&gt; \n  head(n = 5) # The head(n = 5) function shows the top five (n) rows of data\n\n\n  \n\n\n\nand the last four rows are below:\n\npenguins |&gt; \n  tail(n = 4) # The tail(n = 4) function shows the bottom four (n) rows of data\n\n\n  \n\n\n\n\n\n\n\n\n\nTip\n\n\n\nUse glimpse(penguins) to quickly see variable names, types, and example values.\n\n\nWe can see that we have different types of data in each column.\n\nspecies, island, and sex are factors\nbill_len and bill_dep are doubles (numeric variables with decimals)\nflipper_len, body_mass, and year are integers\n\n\n\n\n\n\n\nNote\n\n\n\nThe pipe operator |&gt; essentially passes the object on the left to the right, this could be one one line\npenguins |&gt; head()\nor it might be on multiple lines\npenguins |&gt; \n  head()\n\n\n\n\n2.3.2 Load your own\nUsually you will need to load your own data into R, this will need to be done each session. There are several ways of doing this, one of the most common ways to do so is using read_csv()\n\nmy_data &lt;- read_csv(\"data/my_file.csv\")\n\nhead(my_data)\n\n\n\n\n\n\n\nTip\n\n\n\nMake sure the file path is correct and that you’ve set your working directory to where the file is saved.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R: quick start</span>"
    ]
  },
  {
    "objectID": "tutorials/01-intro.html#explore-dataset-dimensions",
    "href": "tutorials/01-intro.html#explore-dataset-dimensions",
    "title": "2  R: quick start",
    "section": "2.4 Explore dataset dimensions",
    "text": "2.4 Explore dataset dimensions\nGet a quick sense of how much data you have before diving into analysis.\n\nExampleExerciseSolution\n\n\nCount the number of rows and columns in the penguins data.\n\nnrow(penguins)\n\n[1] 344\n\nncol(penguins)\n\n[1] 8\n\n\n\n\nWork out how many distinct islands and years are represented. Replace the blanks with the correct column names and compute the summary with tidyverse verbs.\n\npenguins |&gt; \n  summarise(\n    num_islands = n_distinct(____),\n    num_years = n_distinct(____)\n  )\n\n\n\n\n\nShow solution\npenguins |&gt; \n  summarise(\n    num_islands = n_distinct(island),\n    num_years = n_distinct(year)\n  )",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R: quick start</span>"
    ]
  },
  {
    "objectID": "tutorials/01-intro.html#summarise-numeric-columns",
    "href": "tutorials/01-intro.html#summarise-numeric-columns",
    "title": "2  R: quick start",
    "section": "2.5 Summarise numeric columns",
    "text": "2.5 Summarise numeric columns\nUse basic summary functions to understand ranges of your numeric variables.\n\nExampleExerciseSolution\n\n\nCompute the mean bill length while removing missing values.\n\npenguins |&gt; \n  summarise(mean_bill_len = mean(bill_len, na.rm = TRUE))\n\n\n  \n\n\n\n\n\nCalculate the median flipper length and standard deviation of body mass, excluding missing values. Fill in the blanks with the appropriate column names.\n\npenguins |&gt; \n  summarise(\n    median_flipper_len = median(____, ____ = ____),\n    sd_body_mass = sd(____, ____ = ____)\n  )\n\n\n\n\n\nShow solution\npenguins |&gt; \n  summarise(\n    median_flipper_len = median(flipper_len, na.rm = TRUE),\n    sd_body_mass = sd(body_mass, na.rm = TRUE)\n  )",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R: quick start</span>"
    ]
  },
  {
    "objectID": "tutorials/01-intro.html#next-chapter",
    "href": "tutorials/01-intro.html#next-chapter",
    "title": "2  R: quick start",
    "section": "2.6 Next chapter",
    "text": "2.6 Next chapter\nNow that you can install, load, and explore data, you’re ready to start manipulating it with dplyr.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R: quick start</span>"
    ]
  },
  {
    "objectID": "tutorials/01-intro.html#footnotes",
    "href": "tutorials/01-intro.html#footnotes",
    "title": "2  R: quick start",
    "section": "",
    "text": "You can install multiple packages using one function call by using the c() operator to chain the packages together. Remember to use quote marks ‘“’ around each package name.↩︎",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R: quick start</span>"
    ]
  },
  {
    "objectID": "tutorials/02-dplyr-basics.html",
    "href": "tutorials/02-dplyr-basics.html",
    "title": "3  Data manipulation with dplyr",
    "section": "",
    "text": "3.1 New variables\nUse mutate() to create new variables or modify existing ones. Here we estimate a rough “bill volume” from the existing bill dimensions.\nWe have two variables about the penguin’s bills: bill_len and bill_dep. We want to calculate a volume of each penguins bill. For now, we will assume that their bills are twice as deep as they are wide (and they are perfect cuboids!). First we want to create a variable that is their bill width and then we want to calculate the volume.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data manipulation with dplyr</span>"
    ]
  },
  {
    "objectID": "tutorials/02-dplyr-basics.html#new-variables",
    "href": "tutorials/02-dplyr-basics.html#new-variables",
    "title": "3  Data manipulation with dplyr",
    "section": "",
    "text": "ExampleExerciseSolution\n\n\nThe code below will create a new column at the end of the data called bill_wid. Next you will extend this to calculate the volume of the bill, creating the variable bill_vol.\n\npenguins |&gt; \n  mutate(bill_wid = 0.5 * bill_dep)\n\n\n  \n\n\n\n\n\nTry creating both bill_wid and bill_vol in one step. Replace the blanks with the correct variable names.\n\npenguins |&gt; \n  mutate(bill_wid = 0.5 * bill_dep,\n         ____ = bill_len * bill_dep * ____)\n\n\n\n\n\n\n\nTip\n\n\n\nYou can create several new variables in one mutate() call — later variables can use ones you just created.\n\n\n\n\n\n\nShow solution\npenguins |&gt; \n  mutate(bill_wid = 0.5 * bill_dep,\n         bill_vol = bill_len * bill_dep * bill_wid)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data manipulation with dplyr</span>"
    ]
  },
  {
    "objectID": "tutorials/02-dplyr-basics.html#filter",
    "href": "tutorials/02-dplyr-basics.html#filter",
    "title": "3  Data manipulation with dplyr",
    "section": "3.2 Filter",
    "text": "3.2 Filter\nUse filter() to keep only rows that meet one or more conditions. It’s like subsetting your data to focus on cases of interest.\n\nExampleExerciseSolution\n\n\nHere we select only Adelie penguins.\n\npenguins |&gt;\n  filter(species == \"Adelie\")\n\n\n  \n\n\n\nYou can combine conditions with & (and), | (or), and ! (not):\n\npenguins |&gt;\n  # Only Adelie penguins from Torgersen Island heavier than 4000g\n  filter(species == \"Adelie\" & island == \"Torgersen\" & body_mass &gt; 4000)\n\n\n  \n\n\n\n\n\nFilter to include only Gentoo penguins with a body mass over 5000g. Replace the blanks with the correct variable names.\n\npenguins |&gt;\n  filter(___ == \"Gentoo\", ___ &gt; 5000)\n\n\n\n\n\n\n\nNote\n\n\n\nfilter() is case-sensitive: “Gentoo” is not the same as “gentoo”.\n\n\n\n\n\n\nShow solution\npenguins |&gt;\n  filter(species == \"Gentoo\", body_mass &gt; 5000)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data manipulation with dplyr</span>"
    ]
  },
  {
    "objectID": "tutorials/02-dplyr-basics.html#select",
    "href": "tutorials/02-dplyr-basics.html#select",
    "title": "3  Data manipulation with dplyr",
    "section": "3.3 Select",
    "text": "3.3 Select\nUse select() to choose variables you want to keep, or to reorder or drop columns. You can name them directly, use helpers like starts_with(), or exclude with -.\n\nExampleExerciseSolution\n\n\n\npenguins |&gt;\n  select(species, island, bill_len, bill_dep)\n\n\n  \n\n\n\n\npenguins |&gt; \n  select(starts_with(\"bill\"))\n\n\n  \n\n\n\n\n\nSelect the key descriptive variables for species and bill or flipper size. Replace the blanks with the correct variable names.\n\npenguins |&gt;\n  select(___, ___, ___, ___)\n\n\n\n\n\n\n\nTip\n\n\n\nWhen using select(), the column order in your code determines the order in the result.\n\n\n\n\n\n\nShow solution\npenguins |&gt;\n  select(species, bill_len, bill_dep, flipper_len)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data manipulation with dplyr</span>"
    ]
  },
  {
    "objectID": "tutorials/02-dplyr-basics.html#summary-statistics",
    "href": "tutorials/02-dplyr-basics.html#summary-statistics",
    "title": "3  Data manipulation with dplyr",
    "section": "3.4 Summary statistics",
    "text": "3.4 Summary statistics\nUse group_by() with summarise() to compute summary statistics for each group.\n\nn() returns the number of rows\nmean() returns the mean\nsd() returns the standard deviation\n\n\n\n\n\n\n\nTip\n\n\n\nWhen grouping, always confirm that the variable you group by has the expected number of unique values using n_distinct().\n\n\n\nExample 1Exercise 1Solution 1Example 2Exercise 2Solution 2\n\n\nIn this example, we are interested in the number of penguins within each species and the mean and standard deviation for their bill lengths.\n\npenguins |&gt; \n  group_by(species) |&gt; \n  summarise(\n    n = n(),\n    mean_bill_len = mean(bill_len, na.rm = TRUE),\n    sd_bill_len = sd(bill_len, na.rm = TRUE)\n  )\n\n\n  \n\n\n\n\n\n\n\n\n\nNote\n\n\n\nBy default, mean() and sd() return NA if any missing values exist. Use na.rm = TRUE to remove them before calculating statistics.\n\n\n\n\nSummarise the mean observed body_mass and number of cases for each species. Replace the blanks with the correct variable names.\n\npenguins |&gt;\n  group_by(____) |&gt;\n  summarise(\n    n = n(),\n    mean_body_mass_comp = mean(____, ____ = ____)\n  )\n\n\n\n\n\n\n\nTip\n\n\n\nAlways check whether your summary excludes missing data — describe this clearly when you present results.\n\n\n\n\n\n\nShow solution\npenguins |&gt;\n  group_by(species) |&gt;\n  summarise(\n    n = n(),\n    mean_body_mass_comp = mean(body_mass, na.rm = TRUE)\n  )\n\n\n\n  \n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThis table shows the number of observations in each species and the mean body mass for cases with observations. This table could be misleading if that is not explained properly as a reader may think that is the mean body mass for all observations.\n\n\n\n\nSometimes you want to calculate statistics only on observed cases before summarising.\n\npenguins |&gt; \n  filter(!is.na(body_mass)) |&gt;\n  group_by(species) |&gt;\n  summarise(n = n(),\n            mean_body_mass = mean(body_mass))\n\n\n  \n\n\n\n\n\nNow we want to present the observed body mass for each species and show how many observations the mean is based on. Replace the blanks with the correct variable names.\n\npenguins |&gt; \n  filter(!____(body_mass)) |&gt; \n  group_by(____) |&gt; \n  summarise(\n    n = ____,\n    mean_body_mass_obs = mean(____))\n\n\n\n\npenguins |&gt; \n  filter(!is.na(body_mass)) |&gt; \n  group_by(species) |&gt; \n  summarise(\n    n = n(),\n    mean_body_mass_obs = mean(body_mass))",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data manipulation with dplyr</span>"
    ]
  },
  {
    "objectID": "tutorials/02-dplyr-basics.html#next-steps",
    "href": "tutorials/02-dplyr-basics.html#next-steps",
    "title": "3  Data manipulation with dplyr",
    "section": "3.5 Next steps",
    "text": "3.5 Next steps\nNow you know how to create, filter, select, and summarise data with dplyr.\nNext, explore arrange() for sorting rows or join() functions for combining datasets.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data manipulation with dplyr</span>"
    ]
  },
  {
    "objectID": "tutorials/03-ggplot-basics.html",
    "href": "tutorials/03-ggplot-basics.html",
    "title": "4  Visualisation with ggplot2",
    "section": "",
    "text": "4.1 Build a scatter plot\nEvery ggplot2 graphic starts with ggplot(data, aes(...)), followed by layers like geom_point().",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualisation with ggplot2</span>"
    ]
  },
  {
    "objectID": "tutorials/03-ggplot-basics.html#build-a-scatter-plot",
    "href": "tutorials/03-ggplot-basics.html#build-a-scatter-plot",
    "title": "4  Visualisation with ggplot2",
    "section": "",
    "text": "ExampleExerciseSolution\n\n\nWe will explore the relationship between bill length and bill depth, colouring points by species.\n\npenguins |&gt;\n  ggplot(aes(x = bill_dep, y = bill_len, colour = species)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\nCreate a scatter plot of flipper length versus body mass, colouring by island. Replace the blanks with the correct variable names.\n\npenguins |&gt;\n  ggplot(aes(x = ____, y = ____, colour = ____)) +\n  geom_point()\n\n\n\n\n\n\n\nTip\n\n\n\nUse informative axis labels when you share plots. labs(x = \"Flipper length (mm)\", y = \"Body mass (g)\") adds descriptive titles.\n\n\n\n\n\n\nShow solution\npenguins |&gt;\n  ggplot(aes(x = flipper_len, y = body_mass, colour = island)) +\n  geom_point()\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualisation with ggplot2</span>"
    ]
  },
  {
    "objectID": "tutorials/03-ggplot-basics.html#map-aesthetics-and-facet",
    "href": "tutorials/03-ggplot-basics.html#map-aesthetics-and-facet",
    "title": "4  Visualisation with ggplot2",
    "section": "4.2 Map aesthetics and facet",
    "text": "4.2 Map aesthetics and facet\nAesthetics control how data values appear on the plot. Facets split the data into small multiples for easier comparison.\n\nExampleExerciseSolution\n\n\nHere we map bill length to the x axis, flipper length to the y axis, colour by species, and break the plot into facets by island.\n\npenguins |&gt;\n  ggplot(aes(x = bill_len, y = flipper_len, colour = species)) +\n  geom_point() +\n  facet_wrap(~ island)\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\nMake a plot of body mass versus bill depth, using point shape for species and faceting by sex. Replace the blanks below.\n\npenguins |&gt;\n  ggplot(aes(x = ____, y = ____, shape = ____)) +\n  geom_point() +\n  facet_wrap(~ ____)\n\n\n\n\n\n\n\nTip\n\n\n\nNot every variable works well as a shape or colour. Continuous variables often look clearer mapped to colour gradients via scale_colour_viridis_c().\n\n\n\n\n\n\nShow solution\npenguins |&gt;\n  ggplot(aes(x = body_mass, y = bill_dep, shape = species)) +\n  geom_point() +\n  facet_wrap(~ sex)\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualisation with ggplot2</span>"
    ]
  },
  {
    "objectID": "tutorials/03-ggplot-basics.html#add-summaries-and-labels",
    "href": "tutorials/03-ggplot-basics.html#add-summaries-and-labels",
    "title": "4  Visualisation with ggplot2",
    "section": "4.3 Add summaries and labels",
    "text": "4.3 Add summaries and labels\nYou can layer statistical summaries and customise labels to communicate the key message.\n\nExampleExerciseSolution\n\n\nAdd a smooth trend line with geom_smooth() and label the axes so the message is clear.\n\npenguins |&gt;\n  ggplot(aes(x = flipper_len, y = body_mass, colour = species)) +\n  geom_point(alpha = 0.6) +\n  geom_smooth(se = FALSE) +\n  labs(\n    x = \"Flipper length (mm)\",\n    y = \"Body mass (g)\",\n    colour = \"Species\"\n  )\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\nStarting from the same scatter plot, add a smooth curve and a title. Replace the blanks with the correct arguments.\n\npenguins |&gt;\n  ggplot(aes(x = flipper_len, y = body_mass, colour = species)) +\n  geom_point(alpha = 0.6) +\n  geom_smooth(se = ____) +\n  labs(title = \"____ vs ____\")\n\n\n\n\n\n\n\nNote\n\n\n\nUsing se = FALSE removes the shaded confidence interval when you only want the trend line.\n\n\n\n\n\n\nShow solution\npenguins |&gt;\n  ggplot(aes(x = flipper_len, y = body_mass, colour = species)) +\n  geom_point(alpha = 0.6) +\n  geom_smooth(se = FALSE) +\n  labs(title = \"Flipper length vs body mass\")\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualisation with ggplot2</span>"
    ]
  },
  {
    "objectID": "tutorials/03-ggplot-basics.html#plot-distributions",
    "href": "tutorials/03-ggplot-basics.html#plot-distributions",
    "title": "4  Visualisation with ggplot2",
    "section": "4.4 Plot distributions",
    "text": "4.4 Plot distributions\nUse histograms or density plots to examine how values are distributed.\n\nExampleExerciseSolution\n\n\nOverlay histograms of bill length for each species.\n\npenguins |&gt;\n  ggplot(aes(x = bill_len, fill = species)) +\n  geom_histogram(position = \"identity\", alpha = 0.5, binwidth = 1) +\n  labs(x = \"Bill length (mm)\", y = \"Count\")\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\n\n\nCreate density curves of body mass by species. Replace the blanks with the correct aesthetics.\n\npenguins |&gt;\n  ggplot(aes(x = ____, colour = ____)) +\n  geom_density(linewidth = 1) +\n  theme_minimal()\n\n\n\n\n\nShow solution\npenguins |&gt;\n  ggplot(aes(x = body_mass, colour = species)) +\n  geom_density(linewidth = 1) +\n  theme_minimal()\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_density()`).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualisation with ggplot2</span>"
    ]
  },
  {
    "objectID": "tutorials/03-ggplot-basics.html#save-plots-to-files",
    "href": "tutorials/03-ggplot-basics.html#save-plots-to-files",
    "title": "4  Visualisation with ggplot2",
    "section": "4.5 Save plots to files",
    "text": "4.5 Save plots to files\nAssign plots to objects so you can reuse or export them with ggsave().\n\nExampleExerciseSolution\n\n\nCreate a plot object and save it as a PNG.\n\nvolume_plot &lt;- penguins |&gt;\n  ggplot(aes(x = bill_dep, y = bill_len, colour = species)) +\n  geom_point(alpha = 0.7)\n\nggsave(\"volume-plot.png\", plot = volume_plot, width = 6, height = 4, dpi = 300)\n\n\n\nBuild a scatter plot of flipper length versus body mass, store it in size_plot, and save it as a PNG. Replace the blanks with the appropriate arguments.\n\nsize_plot &lt;- penguins |&gt;\n  ggplot(aes(x = flipper_len, y = body_mass, colour = species)) +\n  geom_point()\n\nggsave(\"size-plot.png\", plot = size_plot, width = ____, height = ____, dpi = 300)\n\n\n\n\n\nShow solution\nsize_plot &lt;- penguins |&gt;\n  ggplot(aes(x = flipper_len, y = body_mass, colour = species)) +\n  geom_point()\n\nggsave(\"size-plot.png\", plot = size_plot, width = 6, height = 4, dpi = 300)\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualisation with ggplot2</span>"
    ]
  },
  {
    "objectID": "tutorials/03-ggplot-basics.html#next-steps",
    "href": "tutorials/03-ggplot-basics.html#next-steps",
    "title": "4  Visualisation with ggplot2",
    "section": "4.6 Next steps",
    "text": "4.6 Next steps\nNow you know how to construct scatter plots, encode additional variables, and add summaries with ggplot2. Next, explore other geoms like geom_histogram() for distributions or geom_col() for totals.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualisation with ggplot2</span>"
    ]
  },
  {
    "objectID": "tutorials/04-lm-basics.html",
    "href": "tutorials/04-lm-basics.html",
    "title": "5  Linear models: a minimal example",
    "section": "",
    "text": "5.1 Fit a linear model\nUse lm() with a formula of the form response ~ predictor1 + predictor2 to estimate how a numeric outcome changes with one or more predictors.\nFor example, we can model penguin bill length as a function of bill depth.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Linear models: a minimal example</span>"
    ]
  },
  {
    "objectID": "tutorials/04-lm-basics.html#fit-a-linear-model",
    "href": "tutorials/04-lm-basics.html#fit-a-linear-model",
    "title": "5  Linear models: a minimal example",
    "section": "",
    "text": "ExampleExerciseSolution\n\n\n\nfit_simple &lt;- lm(bill_len ~ bill_dep, data = penguins)\nfit_simple\n\n\nCall:\nlm(formula = bill_len ~ bill_dep, data = penguins)\n\nCoefficients:\n(Intercept)     bill_dep  \n    55.0674      -0.6498  \n\n\nThis output gives the intercept and slope estimates for the linear relationship between bill_len and bill_dep.\n\n\nExtend the model to also include species as a categorical predictor. Replace the blanks with the appropriate code.\n\nfit_species &lt;- lm(bill_len ~ bill_dep + ____, data = ____)\nfit_species\n\n\n\n\n\n\n\nTip\n\n\n\nlm() automatically creates indicator variables for factors such as species.\n\n\n\n\n\n\nShow solution\nfit_species &lt;- lm(bill_len ~ bill_dep + species, data = penguins)\nfit_species\n\n\n\nCall:\nlm(formula = bill_len ~ bill_dep + species, data = penguins)\n\nCoefficients:\n     (Intercept)          bill_dep  speciesChinstrap     speciesGentoo  \n          13.216             1.394             9.939            13.403",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Linear models: a minimal example</span>"
    ]
  },
  {
    "objectID": "tutorials/04-lm-basics.html#include-interaction-terms",
    "href": "tutorials/04-lm-basics.html#include-interaction-terms",
    "title": "5  Linear models: a minimal example",
    "section": "5.2 Include interaction terms",
    "text": "5.2 Include interaction terms\nInteractions let the effect of one predictor change depending on another predictor’s value.\n\nExampleExerciseSolution\n\n\nFit a model with an interaction between bill depth and species.\n\nfit_interaction &lt;- lm(bill_len ~ bill_dep * species, data = penguins)\ntidy(fit_interaction)\n\n\n  \n\n\n\n\n\nFit a model that allows the effect of bill depth to differ by sex. Replace the blanks.\n\nfit_sex &lt;- lm(bill_len ~ bill_dep * ____, data = ____)\ntidy(fit_sex)\n\n\n\n\n\nShow solution\nfit_sex &lt;- lm(bill_len ~ bill_dep * sex, data = penguins)\ntidy(fit_sex)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Linear models: a minimal example</span>"
    ]
  },
  {
    "objectID": "tutorials/04-lm-basics.html#interpret-coefficients",
    "href": "tutorials/04-lm-basics.html#interpret-coefficients",
    "title": "5  Linear models: a minimal example",
    "section": "5.3 Interpret coefficients",
    "text": "5.3 Interpret coefficients\nbroom::tidy() converts model output into a tidy tibble that is easy to read and combine with other results.\nEach coefficient represents the expected change in bill length for a one-unit change in that predictor, holding all others constant.\n\nExampleExerciseSolution\n\n\nObtain coefficient estimates with standard errors and p-values.\n\ntidy(fit_species)\n\n\n  \n\n\n\n\n\nAdd 95% confidence intervals to the tidy output. Replace the blanks with the correct argument names.\n\ntidy(fit_species, conf.int = ____, conf.level = ____)\n\n\n\n\n\n\n\nNote\n\n\n\nConfidence intervals show a range of plausible values for each coefficient.\n\n\n\n\n\n\nShow solution\ntidy(fit_species, conf.int = TRUE, conf.level = 0.95)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Linear models: a minimal example</span>"
    ]
  },
  {
    "objectID": "tutorials/04-lm-basics.html#check-diagnostics-and-predict",
    "href": "tutorials/04-lm-basics.html#check-diagnostics-and-predict",
    "title": "5  Linear models: a minimal example",
    "section": "5.4 Check diagnostics and predict",
    "text": "5.4 Check diagnostics and predict\nUse augment() for row-level diagnostics and glance() for overall model fit.\nResiduals should scatter randomly around zero; systematic patterns may indicate model misspecification.\nPredictions require a tibble of new values using the same variable names as in the model.\n\nExampleExerciseSolution\n\n\nWe first examine model diagnostics.\n\naugmented &lt;- augment(fit_species)\n\nggplot(augmented, aes(x = .fitted, y = .resid, colour = species)) +\n  geom_point() +\n  geom_hline(yintercept = 0, linewidth = 0.3) +\n  labs(x = \"Fitted bill length\", y = \"Residuals\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nSummarise overall model fit.\n\nglance(fit_species)\n\n\n  \n\n\n\nWe can also use predict() to generate fitted values for the training data or new data.\nHere we predict bill length for the first three penguins in the dataset.\n\npredict(fit_species, newdata = penguins |&gt; head(3))\n\n       1        2        3 \n39.28437 37.47216 38.30856 \n\n\npredict() returns a numeric vector of fitted values corresponding to the supplied rows.\n\n\nCreate predicted bill lengths for new penguins with specified bill depth and species. Replace the blanks with the correct column names or objects.\n\n# tibble() creates a small data frame of new values\nnew_penguins &lt;- tibble(\n  bill_dep = c(17, 19),\n  species = c(\"Adelie\", \"Gentoo\")\n)\n\npredict(____, newdata = ____)\n\n\n\n\n\n\n\nWarning\n\n\n\nAlways check that your new data use the same variable names and factor levels as the original training data.\n\n\n\n\n\n\nShow solution\nnew_penguins &lt;- tibble(\n  bill_dep = c(17, 19),\n  species = c(\"Adelie\", \"Gentoo\")\n)\n\npredict(fit_species, newdata = new_penguins)\n\n\n       1        2 \n36.91455 53.10585",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Linear models: a minimal example</span>"
    ]
  },
  {
    "objectID": "tutorials/04-lm-basics.html#summarise-residual-variation",
    "href": "tutorials/04-lm-basics.html#summarise-residual-variation",
    "title": "5  Linear models: a minimal example",
    "section": "5.5 Summarise residual variation",
    "text": "5.5 Summarise residual variation\nResidual summaries quantify how well the model captures the observed data.\n\nExampleExerciseSolution\n\n\nCompute the mean and standard deviation of residuals from fit_species.\n\naugmented &lt;- augment(fit_species)\n\naugmented |&gt;\n  summarise(\n    mean_resid = mean(.resid),\n    sd_resid = sd(.resid)\n  )\n\n\n  \n\n\n\n\n\nUsing the same augmented tibble, calculate the mean absolute residual. Fill in the blanks.\n\naugmented |&gt;\n  summarise(mean_abs_resid = mean(abs(___), na.rm = TRUE))\n\n\n\n\n\nShow solution\naugmented |&gt;\n  summarise(mean_abs_resid = mean(abs(.resid), na.rm = TRUE))",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Linear models: a minimal example</span>"
    ]
  },
  {
    "objectID": "tutorials/04-lm-basics.html#next-steps",
    "href": "tutorials/04-lm-basics.html#next-steps",
    "title": "5  Linear models: a minimal example",
    "section": "5.6 Next steps",
    "text": "5.6 Next steps\nYou now know how to:\n\nfit a linear model with lm()\ninterpret coefficients using broom::tidy()\ncheck assumptions with augment() and glance()\ngenerate predictions with predict()\n\nNext, experiment with interaction terms (e.g., bill_dep * species) or try using another numeric response such as body_mass.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Linear models: a minimal example</span>"
    ]
  },
  {
    "objectID": "tutorials/05-logistic-basics.html",
    "href": "tutorials/05-logistic-basics.html",
    "title": "6  Logistic regression: modelling binary outcomes",
    "section": "",
    "text": "6.1 Fit a logistic regression\nUse glm() with family = binomial to model a binary outcome as a function of predictors. The coefficients are on the log-odds scale.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Logistic regression: modelling binary outcomes</span>"
    ]
  },
  {
    "objectID": "tutorials/05-logistic-basics.html#fit-a-logistic-regression",
    "href": "tutorials/05-logistic-basics.html#fit-a-logistic-regression",
    "title": "6  Logistic regression: modelling binary outcomes",
    "section": "",
    "text": "ExampleExerciseSolution\n\n\nModel the log-odds of a penguin being male using bill depth.\n\nfit_logit &lt;- glm(sex ~ bill_dep, data = penguins_binary, family = binomial)\nfit_logit\n\n\nCall:  glm(formula = sex ~ bill_dep, family = binomial, data = penguins_binary)\n\nCoefficients:\n(Intercept)     bill_dep  \n    -7.2280       0.4219  \n\nDegrees of Freedom: 332 Total (i.e. Null);  331 Residual\nNull Deviance:      461.6 \nResidual Deviance: 412.9    AIC: 416.9\n\n\nThe intercept represents the log-odds when bill_dep equals zero; the slope shows how the log-odds change for a one-millimetre increase in bill depth.\n\n\nExtend the model by including bill length as an additional predictor. Replace the blanks with the appropriate variable names.\n\nfit_two_predictors &lt;- glm(sex ~ bill_dep + ____, data = penguins_binary, family = binomial)\nfit_two_predictors\n\n\n\n\n\n\n\nTip\n\n\n\nRemember to set family = binomial for logistic regression.\n\n\n\n\n\n\nShow solution\nfit_two_predictors &lt;- glm(sex ~ bill_dep + bill_len, data = penguins_binary, family = binomial)\nfit_two_predictors\n\n\n\nCall:  glm(formula = sex ~ bill_dep + bill_len, family = binomial, data = penguins_binary)\n\nCoefficients:\n(Intercept)     bill_dep     bill_len  \n   -24.9444       0.7672       0.2711  \n\nDegrees of Freedom: 332 Total (i.e. Null);  330 Residual\nNull Deviance:      461.6 \nResidual Deviance: 323.6    AIC: 329.6",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Logistic regression: modelling binary outcomes</span>"
    ]
  },
  {
    "objectID": "tutorials/05-logistic-basics.html#interpret-coefficients-and-odds",
    "href": "tutorials/05-logistic-basics.html#interpret-coefficients-and-odds",
    "title": "6  Logistic regression: modelling binary outcomes",
    "section": "6.2 Interpret coefficients and odds",
    "text": "6.2 Interpret coefficients and odds\nbroom::tidy() summarises logistic regression estimates and allows conversion to odds ratios.\n\nExampleExerciseSolution\n\n\nObtain coefficient estimates and transform them to odds ratios with confidence intervals.\n\ntidy(fit_two_predictors, conf.int = TRUE, exponentiate = TRUE)\n\n\n  \n\n\n\nexponentiate = TRUE converts log-odds to odds ratios, which are easier to interpret.\n\n\nCreate a tibble of odds ratios without confidence intervals for fit_logit. Fill in the blanks.\n\ntidy(fit_logit, exponentiate = ____, conf.int = ____)\n\n\n\n\n\n\n\nNote\n\n\n\nOdds ratios above 1 increase the odds of the outcome; below 1 decrease them.\n\n\n\n\n\n\nShow solution\ntidy(fit_logit, exponentiate = TRUE, conf.int = FALSE)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Logistic regression: modelling binary outcomes</span>"
    ]
  },
  {
    "objectID": "tutorials/05-logistic-basics.html#predict-probabilities",
    "href": "tutorials/05-logistic-basics.html#predict-probabilities",
    "title": "6  Logistic regression: modelling binary outcomes",
    "section": "6.3 Predict probabilities",
    "text": "6.3 Predict probabilities\nUse augment() with type.predict = \"response\" to compute fitted probabilities instead of log-odds.\n\nExampleExerciseSolution\n\n\nCalculate fitted probabilities for the training data and visualise them against bill depth.\n\naugmented &lt;- augment(fit_logit, type.predict = \"response\")\n\naugmented |&gt;\n  ggplot(aes(x = bill_dep, y = .fitted)) +\n  geom_point(alpha = 0.4) +\n  geom_smooth(method = \"loess\", se = FALSE) +\n  labs(x = \"Bill depth (mm)\", y = \"Predicted probability of male\") +\n  theme_minimal()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n.fitted now represents the estimated probability that a penguin is male.\n\n\nPredict the probability that a penguin with a bill depth of 18 mm is male. Replace the blanks with the correct objects.\n\nnew_penguin &lt;- tibble::tibble(bill_dep = 18)\npredict(____, newdata = new_penguin, type = \"____\")\n\n\n\n\n\n\n\nWarning\n\n\n\nEnsure the new data frame contains all predictors used in the model.\n\n\n\n\n\n\nShow solution\nnew_penguin &lt;- tibble::tibble(bill_dep = 18)\npredict(fit_logit, newdata = new_penguin, type = \"response\")\n\n\n        1 \n0.5905672",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Logistic regression: modelling binary outcomes</span>"
    ]
  },
  {
    "objectID": "tutorials/05-logistic-basics.html#evaluate-classification-performance",
    "href": "tutorials/05-logistic-basics.html#evaluate-classification-performance",
    "title": "6  Logistic regression: modelling binary outcomes",
    "section": "6.4 Evaluate classification performance",
    "text": "6.4 Evaluate classification performance\nCompare predicted probabilities to the observed classes using a threshold (e.g., 0.5) and calculate accuracy.\n\nExampleExerciseSolution\n\n\nClassify penguins as male when the predicted probability exceeds 0.5 and compute the proportion correctly classified.\n\naugmented |&gt;\n  mutate(predicted_sex = if_else(.fitted &gt;= 0.5, \"male\", \"female\")) |&gt;\n  summarise(accuracy = mean(predicted_sex == sex))\n\n\n  \n\n\n\n\n\nCount how many penguins are misclassified by this rule. Replace the blanks.\n\naugmented |&gt;\n  mutate(predicted_sex = if_else(.fitted &gt;= 0.5, \"male\", \"female\")) |&gt;\n  summarise(misclassified = sum(predicted_sex != ____))\n\n\n\n\n\nShow solution\naugmented |&gt;\n  mutate(predicted_sex = if_else(.fitted &gt;= 0.5, \"male\", \"female\")) |&gt;\n  summarise(misclassified = sum(predicted_sex != sex))",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Logistic regression: modelling binary outcomes</span>"
    ]
  },
  {
    "objectID": "tutorials/05-logistic-basics.html#next-steps",
    "href": "tutorials/05-logistic-basics.html#next-steps",
    "title": "6  Logistic regression: modelling binary outcomes",
    "section": "6.5 Next steps",
    "text": "6.5 Next steps\nYou now know how to:\n\nfit logistic regression models with glm()\nconvert log-odds to interpretable odds ratios\ngenerate probability predictions and simple classification summaries\n\nNext, explore alternative link functions, add interaction terms (e.g., bill_dep * species), or try evaluating models with metrics such as AUC or precision and recall.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Logistic regression: modelling binary outcomes</span>"
    ]
  }
]