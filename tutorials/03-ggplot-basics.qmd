---
title: "Visualisation with ggplot2"
---

This chapter introduces the `ggplot2` package for building layered graphics. You will learn how to map variables to aesthetics,
 add new layers, and customise the overall look of your plots. We will cover how to:

1. Build a basic scatter plot using `ggplot()`
2. Encode additional variables with colour and faceting
3. Add statistical summaries and adjust labels for readability


:::{.callout-note}
This section assumes:

* you have the `ggplot2` package loaded in your current session using `library(ggplot2)` or `library(tidyverse)`
* your data are in tidy format with one row per observation and one column per variable
:::

We continue working with the `penguins` dataset.

```{r}
#| message: false
library(dplyr) # Data manipulation 
library(ggplot2) # Figures

head(penguins)
```


## Build a scatter plot

Every `ggplot2` graphic starts with `ggplot(data, aes(...))`, followed by layers like `geom_point()`.

::: {.panel-tabset}

### Example

We will explore the relationship between bill length and bill depth, colouring points by species.

```{r}
penguins |>
  ggplot(aes(x = bill_dep, y = bill_len, colour = species)) +
  geom_point()
```

### Exercise

Create a scatter plot of flipper length versus body mass, colouring by island. Replace the blanks with the correct variable names.

```{r}
#| eval: false

penguins |>
  ggplot(aes(x = ____, y = ____, colour = ____)) +
  geom_point()
```

:::{.callout-tip}
Use informative axis labels when you share plots. `labs(x = "Flipper length (mm)", y = "Body mass (g)")` adds descriptive titles.
:::

### Solution

```{r}
#| code-fold: true
#| code-summary: "Show solution"

penguins |>
  ggplot(aes(x = flipper_len, y = body_mass, colour = island)) +
  geom_point()
```

:::

## Map aesthetics and facet

Aesthetics control how data values appear on the plot. Facets split the data into small multiples for easier comparison.

::: {.panel-tabset}

### Example

Here we map bill length to the `x` axis, flipper length to the `y` axis, colour by species, and break the plot into facets by island.

```{r}
penguins |>
  ggplot(aes(x = bill_len, y = flipper_len, colour = species)) +
  geom_point() +
  facet_wrap(~ island)
```

### Exercise

Make a plot of body mass versus bill depth, using point shape for species and faceting by sex. Replace the blanks below.

```{r}
#| eval: false

penguins |>
  ggplot(aes(x = ____, y = ____, shape = ____)) +
  geom_point() +
  facet_wrap(~ ____)
```

:::{.callout-tip}
Not every variable works well as a shape or colour. Continuous variables often look clearer mapped to colour gradients via `scale_colour_viridis_c()`.
:::

### Solution

```{r}
#| code-fold: true
#| code-summary: "Show solution"

penguins |>
  ggplot(aes(x = body_mass, y = bill_dep, shape = species)) +
  geom_point() +
  facet_wrap(~ sex)
```

:::

## Add summaries and labels

You can layer statistical summaries and customise labels to communicate the key message.

::: {.panel-tabset}

### Example

Add a smooth trend line with `geom_smooth()` and label the axes so the message is clear.

```{r}
penguins |>
  ggplot(aes(x = flipper_len, y = body_mass, colour = species)) +
  geom_point(alpha = 0.6) +
  geom_smooth(se = FALSE) +
  labs(
    x = "Flipper length (mm)",
    y = "Body mass (g)",
    colour = "Species"
  )
```

### Exercise

Starting from the same scatter plot, add a smooth curve and a title. Replace the blanks with the correct arguments.

```{r}
#| eval: false

penguins |>
  ggplot(aes(x = flipper_len, y = body_mass, colour = species)) +
  geom_point(alpha = 0.6) +
  geom_smooth(se = ____) +
  labs(title = "____ vs ____")
```

:::{.callout-note}
Using `se = FALSE` removes the shaded confidence interval when you only want the trend line.
:::

### Solution

```{r}
#| code-fold: true
#| code-summary: "Show solution"

penguins |>
  ggplot(aes(x = flipper_len, y = body_mass, colour = species)) +
  geom_point(alpha = 0.6) +
  geom_smooth(se = FALSE) +
  labs(title = "Flipper length vs body mass")
```

:::

## Plot distributions

Use histograms or density plots to examine how values are distributed.

::: {.panel-tabset}

### Example

Overlay histograms of bill length for each species.

```{r}
penguins |>
  ggplot(aes(x = bill_len, fill = species)) +
  geom_histogram(position = "identity", alpha = 0.5, binwidth = 1) +
  labs(x = "Bill length (mm)", y = "Count")
```

### Exercise

Create density curves of body mass by species. Replace the blanks with the correct aesthetics.

```{r}
#| eval: false

penguins |>
  ggplot(aes(x = ____, colour = ____)) +
  geom_density(linewidth = 1) +
  theme_minimal()
```

### Solution

```{r}
#| code-fold: true
#| code-summary: "Show solution"

penguins |>
  ggplot(aes(x = body_mass, colour = species)) +
  geom_density(linewidth = 1) +
  theme_minimal()
```

:::

## Save plots to files

Assign plots to objects so you can reuse or export them with `ggsave()`.

::: {.panel-tabset}

### Example

Create a plot object and save it as a PNG.

```{r}
#| eval: false

volume_plot <- penguins |>
  ggplot(aes(x = bill_dep, y = bill_len, colour = species)) +
  geom_point(alpha = 0.7)

ggsave("volume-plot.png", plot = volume_plot, width = 6, height = 4, dpi = 300)
```

### Exercise

Build a scatter plot of flipper length versus body mass, store it in `size_plot`, and save it as a PNG. Replace the blanks with the appropriate arguments.

```{r}
#| eval: false

size_plot <- penguins |>
  ggplot(aes(x = flipper_len, y = body_mass, colour = species)) +
  geom_point()

ggsave("size-plot.png", plot = size_plot, width = ____, height = ____, dpi = 300)
```

### Solution

```{r}
#| code-fold: true
#| code-summary: "Show solution"

size_plot <- penguins |>
  ggplot(aes(x = flipper_len, y = body_mass, colour = species)) +
  geom_point()

ggsave("size-plot.png", plot = size_plot, width = 6, height = 4, dpi = 300)
```

:::

## Next steps
Now you know how to construct scatter plots, encode additional variables, and add summaries with `ggplot2`.
Next, explore other geoms like `geom_histogram()` for distributions or `geom_col()` for totals.
