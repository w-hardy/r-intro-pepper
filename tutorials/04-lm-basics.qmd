---
title: "Linear models: a minimal example"
---

Linear models describe how a numeric response changes with one or more predictors. In this chapter you will:

1. Fit a linear model with `lm()`
2. Tidy coefficient estimates for interpretation
3. Check model diagnostics and make predictions


:::{.callout-note}
This section assumes:

* you have loaded `dplyr`, `ggplot2`, and `broom`
* your response variable is numeric and roughly continuous
* you have inspected the data for missing values or obvious data entry errors
:::

We continue using the `penguins` dataset to predict bill length.

```{r}
#| message: false
library(dplyr)  # Data manipulation
library(ggplot2)  # Figures
library(broom)  # Model tidying

penguins |>
  select(species, bill_len, bill_dep, flipper_len, body_mass, sex) |>
  head()
```


## Fit a linear model

Use `lm()` with a formula of the form `response ~ predictor1 + predictor2` to estimate the relationship.

::: {.panel-tabset}

### Example

We model bill length as a function of bill depth.

```{r}
fit_simple <- lm(bill_len ~ bill_dep, data = penguins)
fit_simple
```

### Exercise

Extend the model to also include species as a categorical predictor. Replace the blanks with the appropriate code.

```{r}
#| eval: false

fit_species <- lm(bill_len ~ bill_dep + ____, data = ____)
fit_species
```

:::{.callout-tip}
`lm()` automatically creates indicator variables for factors like `species`.
:::

### Solution

```{r}
#| code-fold: true
#| code-summary: "Show solution"

fit_species <- lm(bill_len ~ bill_dep + species, data = penguins)
fit_species
```

:::

## Interpret coefficients

`broom::tidy()` converts model output into a tidy tibble that is easy to read and combine with other results.

::: {.panel-tabset}

### Example

We obtain coefficient estimates with standard errors and p-values.

```{r}
tidy(fit_species)
```

### Exercise

Add 95% confidence intervals to the tidy output. Replace the blanks with the correct argument names.

```{r}
#| eval: false

tidy(fit_species, conf.int = ____, conf.level = ____)
```

:::{.callout-note}
Confidence intervals provide a range of plausible values for each coefficient.
:::

### Solution

```{r}
#| code-fold: true
#| code-summary: "Show solution"

tidy(fit_species, conf.int = TRUE, conf.level = 0.95)
```

:::

## Check diagnostics and predict

Use `augment()` for row-level diagnostics and `glance()` for overall model fit. Predictions require a tibble of new values.

::: {.panel-tabset}

### Example

Here we draw a residual plot and summarise goodness of fit.

```{r}
augmented <- augment(fit_species)

ggplot(augmented, aes(x = .fitted, y = .resid, colour = species)) +
  geom_point() +
  geom_hline(yintercept = 0, linewidth = 0.3) +
  labs(x = "Fitted bill length", y = "Residuals") +
  theme_minimal()
```

```{r}
glance(fit_species)
```

### Exercise

Create predicted bill lengths for new penguins with specified bill depth and species. Replace the blanks with the correct column names.

```{r}
#| eval: false

new_penguins <- tibble(
  bill_dep = c(17, 19),
  species = c("Adelie", "Gentoo")
)

predict(____, newdata = ____) |>
  (\(pred) tibble(predicted_bill_len = pred)) |>
  bind_cols(new_penguins)
```

:::{.callout-warning}
Always check that your new data use the same variable names and factor levels as the original training data.
:::

### Solution

```{r}
#| code-fold: true
#| code-summary: "Show solution"

new_penguins <- tibble(
  bill_dep = c(17, 19),
  species = c("Adelie", "Gentoo")
)

predict(fit_species, newdata = new_penguins) |>
  (\(pred) tibble(predicted_bill_len = pred)) |>
  bind_cols(new_penguins)
```

:::

## Next steps
Now you know how to fit, interpret, and evaluate a linear model in R.
Next, explore models with interaction terms (e.g., `bill_dep * species`) or experiment with other response variables.
